{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Documents\\\\Spotify Project\\\\SPOTIFY-FRONTEND-GOOD\\\\spot\\\\src\\\\FileUpload.jsx\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport storage from \"./firebaseConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet devURL = \"http://localhost:8080\";\n//let devURL = \"https://alexsherrowspotify.herokuapp.com\"\n\nfunction FileUpload(props) {\n  const formHandler = e => {\n    e.preventDefault();\n    const file = e.target[0].files[0];\n    uploadFiles(file, e.target[1].value, e.target[2].value, e.target[3].value);\n    props.setRefresh(true);\n  };\n  const uploadFiles = (file, name, artist, album) => {\n    // State to store uploaded file\n    const storageRef = ref(storage, `/files/${file.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, file);\n    uploadTask.on(\"state_changed\", snapshot => {\n      const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n      console.log(prog + '%');\n    }, err => console.log(err), () => {\n      getDownloadURL(uploadTask.snapshot.ref).then(url => {\n        const song = {\n          name,\n          artist,\n          url,\n          album\n        };\n        fetch(devURL + \"/song/addSong\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(song)\n        }).then(() => {\n          console.log(\"New song added\");\n          props.setRefresh(false);\n        });\n        const artistPost = {\n          name: artist\n        };\n        fetch(devURL + \"/artist/addArtist\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(artistPost)\n        }).then(() => {\n          console.log(\"New artist added\");\n        });\n        const albumPost = {\n          name: album\n        };\n        fetch(devURL + \"/album/addAlbum\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(albumPost)\n        }).then(() => {\n          console.log(\"New album added\");\n        });\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"songName\",\n        defaultValue: \"Song Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"artistName\",\n        defaultValue: \"Artist Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"albumName\",\n        defaultValue: \"Album Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["ref","uploadBytesResumable","getDownloadURL","storage","devURL","FileUpload","props","formHandler","e","preventDefault","file","target","files","uploadFiles","value","setRefresh","name","artist","album","storageRef","uploadTask","on","snapshot","prog","Math","round","bytesTransferred","totalBytes","console","log","err","then","url","song","fetch","method","headers","body","JSON","stringify","artistPost","albumPost"],"sources":["C:/Users/Alex/Documents/Spotify Project/SPOTIFY-FRONTEND-GOOD/spot/src/FileUpload.jsx"],"sourcesContent":["import { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport storage from \"./firebaseConfig\";\r\n\r\nlet devURL = \"http://localhost:8080\";\r\n//let devURL = \"https://alexsherrowspotify.herokuapp.com\"\r\n\r\nfunction FileUpload(props) {\r\n    const formHandler = (e) => {\r\n        e.preventDefault();\r\n        const file = e.target[0].files[0];\r\n        uploadFiles(file, e.target[1].value, e.target[2].value, e.target[3].value);\r\n        props.setRefresh(true);\r\n        };\r\n\r\n    const uploadFiles = (file, name, artist, album) => {\r\n            // State to store uploaded file\r\n        const storageRef = ref(storage, `/files/${file.name}`);\r\n        const uploadTask = uploadBytesResumable(storageRef, file);\r\n  \r\n        uploadTask.on(\"state_changed\", (snapshot) => {\r\n          const prog = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\r\n          console.log(prog + '%');\r\n        }, (err) => console.log(err),\r\n        () => {\r\n            getDownloadURL(uploadTask.snapshot.ref)\r\n            .then(url => {\r\n              const song={name, artist, url, album};\r\n              fetch(devURL + \"/song/addSong\",{\r\n                method:\"POST\",\r\n                headers:{\"Content-Type\":\"application/json\"},\r\n                body:JSON.stringify(song)\r\n            }).then(()=>{\r\n              console.log(\"New song added\");\r\n              props.setRefresh(false);\r\n            })\r\n\r\n            const artistPost = {name: artist};\r\n            fetch(devURL + \"/artist/addArtist\",{\r\n              method:\"POST\",\r\n              headers:{\"Content-Type\":\"application/json\"},\r\n              body:JSON.stringify(artistPost)\r\n          }).then(()=>{\r\n            console.log(\"New artist added\");\r\n          })\r\n\r\n          const albumPost = {name: album};\r\n          fetch(devURL + \"/album/addAlbum\",{\r\n            method:\"POST\",\r\n            headers:{\"Content-Type\":\"application/json\"},\r\n            body:JSON.stringify(albumPost)\r\n        }).then(()=>{\r\n          console.log(\"New album added\");\r\n        })\r\n\r\n            });\r\n\r\n        } );\r\n      }\r\n      return(\r\n        <div className=\"App\">\r\n            <form onSubmit={formHandler}>\r\n                <input type=\"file\" className=\"file\"/>\r\n                <input type=\"text\" name=\"songName\" defaultValue='Song Name'/>\r\n                <input type=\"text\" name=\"artistName\" defaultValue='Artist Name'/>\r\n                <input type=\"text\" name=\"albumName\" defaultValue='Album Name'/>\r\n                <button type=\"submit\">Upload</button>\r\n            </form>\r\n            <hr/>\r\n        </div>\r\n      );\r\n\r\n}\r\nexport default FileUpload;"],"mappings":";AAAA,SAASA,GAAG,EAAEC,oBAAoB,EAAEC,cAAc,QAAQ,kBAAkB;AAC5E,OAAOC,OAAO,MAAM,kBAAkB;AAAC;AAEvC,IAAIC,MAAM,GAAG,uBAAuB;AACpC;;AAEA,SAASC,UAAU,CAACC,KAAK,EAAE;EACvB,MAAMC,WAAW,GAAIC,CAAC,IAAK;IACvBA,CAAC,CAACC,cAAc,EAAE;IAClB,MAAMC,IAAI,GAAGF,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;IACjCC,WAAW,CAACH,IAAI,EAAEF,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACG,KAAK,EAAEN,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACG,KAAK,EAAEN,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACG,KAAK,CAAC;IAC1ER,KAAK,CAACS,UAAU,CAAC,IAAI,CAAC;EACtB,CAAC;EAEL,MAAMF,WAAW,GAAG,CAACH,IAAI,EAAEM,IAAI,EAAEC,MAAM,EAAEC,KAAK,KAAK;IAC3C;IACJ,MAAMC,UAAU,GAAGnB,GAAG,CAACG,OAAO,EAAG,UAASO,IAAI,CAACM,IAAK,EAAC,CAAC;IACtD,MAAMI,UAAU,GAAGnB,oBAAoB,CAACkB,UAAU,EAAET,IAAI,CAAC;IAEzDU,UAAU,CAACC,EAAE,CAAC,eAAe,EAAGC,QAAQ,IAAK;MAC3C,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAAEH,QAAQ,CAACI,gBAAgB,GAAGJ,QAAQ,CAACK,UAAU,GAAI,GAAG,CAAC;MAChFC,OAAO,CAACC,GAAG,CAACN,IAAI,GAAG,GAAG,CAAC;IACzB,CAAC,EAAGO,GAAG,IAAKF,OAAO,CAACC,GAAG,CAACC,GAAG,CAAC,EAC5B,MAAM;MACF5B,cAAc,CAACkB,UAAU,CAACE,QAAQ,CAACtB,GAAG,CAAC,CACtC+B,IAAI,CAACC,GAAG,IAAI;QACX,MAAMC,IAAI,GAAC;UAACjB,IAAI;UAAEC,MAAM;UAAEe,GAAG;UAAEd;QAAK,CAAC;QACrCgB,KAAK,CAAC9B,MAAM,GAAG,eAAe,EAAC;UAC7B+B,MAAM,EAAC,MAAM;UACbC,OAAO,EAAC;YAAC,cAAc,EAAC;UAAkB,CAAC;UAC3CC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACN,IAAI;QAC5B,CAAC,CAAC,CAACF,IAAI,CAAC,MAAI;UACVH,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;UAC7BvB,KAAK,CAACS,UAAU,CAAC,KAAK,CAAC;QACzB,CAAC,CAAC;QAEF,MAAMyB,UAAU,GAAG;UAACxB,IAAI,EAAEC;QAAM,CAAC;QACjCiB,KAAK,CAAC9B,MAAM,GAAG,mBAAmB,EAAC;UACjC+B,MAAM,EAAC,MAAM;UACbC,OAAO,EAAC;YAAC,cAAc,EAAC;UAAkB,CAAC;UAC3CC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACC,UAAU;QAClC,CAAC,CAAC,CAACT,IAAI,CAAC,MAAI;UACVH,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QACjC,CAAC,CAAC;QAEF,MAAMY,SAAS,GAAG;UAACzB,IAAI,EAAEE;QAAK,CAAC;QAC/BgB,KAAK,CAAC9B,MAAM,GAAG,iBAAiB,EAAC;UAC/B+B,MAAM,EAAC,MAAM;UACbC,OAAO,EAAC;YAAC,cAAc,EAAC;UAAkB,CAAC;UAC3CC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACE,SAAS;QACjC,CAAC,CAAC,CAACV,IAAI,CAAC,MAAI;UACVH,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;QAChC,CAAC,CAAC;MAEE,CAAC,CAAC;IAEN,CAAC,CAAE;EACL,CAAC;EACD,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAChB;MAAM,QAAQ,EAAEtB,WAAY;MAAA,wBACxB;QAAO,IAAI,EAAC,MAAM;QAAC,SAAS,EAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAAE,eACrC;QAAO,IAAI,EAAC,MAAM;QAAC,IAAI,EAAC,UAAU;QAAC,YAAY,EAAC;MAAW;QAAA;QAAA;QAAA;MAAA,QAAE,eAC7D;QAAO,IAAI,EAAC,MAAM;QAAC,IAAI,EAAC,YAAY;QAAC,YAAY,EAAC;MAAa;QAAA;QAAA;QAAA;MAAA,QAAE,eACjE;QAAO,IAAI,EAAC,MAAM;QAAC,IAAI,EAAC,WAAW;QAAC,YAAY,EAAC;MAAY;QAAA;QAAA;QAAA;MAAA,QAAE,eAC/D;QAAQ,IAAI,EAAC,QAAQ;QAAA,UAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAClC,eACP;MAAA;MAAA;MAAA;IAAA,QAAK;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAGd;AAAC,KAjEQF,UAAU;AAkEnB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}