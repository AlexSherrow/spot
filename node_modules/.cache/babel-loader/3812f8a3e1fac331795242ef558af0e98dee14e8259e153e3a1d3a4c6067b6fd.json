{"ast":null,"code":"import { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { useState } from \"react\";\nimport storage from \"./firebaseConfig\";\nexport function UploadFiles(props) {\n  // State to store uploaded file\n  let name = props.name;\n  let artist = props.artist;\n  let file = props.file;\n  const storageRef = ref(storage, \"/files/\" + {\n    name\n  });\n  const uploadTask = uploadBytesResumable(storageRef, file);\n  uploadTask.on(\"state_changed\", snapshot => {\n    const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n    props.setProgress(prog);\n  }, err => console.log(err), () => {\n    getDownloadURL(uploadTask.snapshot.ref).then(url => {\n      console.log(url);\n      const song = {\n        name,\n        artist,\n        file\n      };\n      fetch(\"http://localhost:8080/song/add\", {\n        //fetch(\"https://alexsherrowspotify.herokuapp.com/song/add\",{\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(song)\n      }).then(() => {\n        console.log(\"New song added\");\n      });\n    });\n  });\n}\n_c = UploadFiles;\nvar _c;\n$RefreshReg$(_c, \"UploadFiles\");","map":{"version":3,"names":["ref","uploadBytesResumable","getDownloadURL","useState","storage","UploadFiles","props","name","artist","file","storageRef","uploadTask","on","snapshot","prog","Math","round","bytesTransferred","totalBytes","setProgress","err","console","log","then","url","song","fetch","method","headers","body","JSON","stringify"],"sources":["C:/Users/Alex/Documents/Spotify Project/SPOTIFY-FRONTEND-GOOD/spot/src/FileUpload.jsx"],"sourcesContent":["import { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport { useState } from \"react\";\r\nimport storage from \"./firebaseConfig\";\r\n\r\nexport function UploadFiles (props) {\r\n      // State to store uploaded file\r\n  let name = props.name;\r\n  let artist = props.artist;\r\n  let file = props.file;\r\n  const storageRef = ref(storage, \"/files/\" + {name});\r\n  const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n  uploadTask.on(\"state_changed\", (snapshot) => {\r\n    const prog = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\r\n    props.setProgress(prog);\r\n  }, (err) => console.log(err),\r\n  () => {\r\n      getDownloadURL(uploadTask.snapshot.ref)\r\n      .then(url => {\r\n        console.log(url);\r\n        const song={name, artist, file};\r\n        fetch(\"http://localhost:8080/song/add\",{\r\n        //fetch(\"https://alexsherrowspotify.herokuapp.com/song/add\",{\r\n          method:\"POST\",\r\n          headers:{\"Content-Type\":\"application/json\"},\r\n          body:JSON.stringify(song)\r\n      }).then(()=>{\r\n        console.log(\"New song added\")\r\n      })\r\n      });\r\n\r\n  } );\r\n}"],"mappings":"AAAA,SAASA,GAAG,EAAEC,oBAAoB,EAAEC,cAAc,QAAQ,kBAAkB;AAC5E,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,OAAO,MAAM,kBAAkB;AAEtC,OAAO,SAASC,WAAW,CAAEC,KAAK,EAAE;EAC9B;EACJ,IAAIC,IAAI,GAAGD,KAAK,CAACC,IAAI;EACrB,IAAIC,MAAM,GAAGF,KAAK,CAACE,MAAM;EACzB,IAAIC,IAAI,GAAGH,KAAK,CAACG,IAAI;EACrB,MAAMC,UAAU,GAAGV,GAAG,CAACI,OAAO,EAAE,SAAS,GAAG;IAACG;EAAI,CAAC,CAAC;EACnD,MAAMI,UAAU,GAAGV,oBAAoB,CAACS,UAAU,EAAED,IAAI,CAAC;EAEzDE,UAAU,CAACC,EAAE,CAAC,eAAe,EAAGC,QAAQ,IAAK;IAC3C,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAAEH,QAAQ,CAACI,gBAAgB,GAAGJ,QAAQ,CAACK,UAAU,GAAI,GAAG,CAAC;IAChFZ,KAAK,CAACa,WAAW,CAACL,IAAI,CAAC;EACzB,CAAC,EAAGM,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,EAC5B,MAAM;IACFlB,cAAc,CAACS,UAAU,CAACE,QAAQ,CAACb,GAAG,CAAC,CACtCuB,IAAI,CAACC,GAAG,IAAI;MACXH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;MAChB,MAAMC,IAAI,GAAC;QAAClB,IAAI;QAAEC,MAAM;QAAEC;MAAI,CAAC;MAC/BiB,KAAK,CAAC,gCAAgC,EAAC;QACvC;QACEC,MAAM,EAAC,MAAM;QACbC,OAAO,EAAC;UAAC,cAAc,EAAC;QAAkB,CAAC;QAC3CC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACN,IAAI;MAC5B,CAAC,CAAC,CAACF,IAAI,CAAC,MAAI;QACVF,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC/B,CAAC,CAAC;IACF,CAAC,CAAC;EAEN,CAAC,CAAE;AACL;AAAC,KA5BejB,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}